// Mocks generated by Mockito 5.0.8 from annotations
// in ditonton/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:convert' as _i18;
import 'dart:typed_data' as _i19;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ditonton/common/failure.dart' as _i8;
import 'package:ditonton/data/datasources/db/database_helper.dart' as _i15;
import 'package:ditonton/data/datasources/tvseries_local_data_source.dart' as _i13;
import 'package:ditonton/data/datasources/tvseries_remote_data_source.dart'
as _i11;
import 'package:ditonton/data/models/tvseries_detail_model.dart' as _i3;
import 'package:ditonton/data/models/tvseries_model.dart' as _i12;
import 'package:ditonton/data/models/tvseries_table.dart' as _i14;
import 'package:ditonton/domain/entities/tvseries.dart' as _i9;
import 'package:ditonton/domain/entities/tvseries_detail.dart' as _i10;
import 'package:ditonton/domain/repositories/tvseries_repository.dart' as _i6;
import 'package:http/src/base_request.dart' as _i20;
import 'package:http/src/client.dart' as _i17;
import 'package:http/src/response.dart' as _i4;
import 'package:http/src/streamed_response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite_common/sqlite_api.dart' as _i16;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeTVSeriesDetailResponse extends _i1.Fake
    implements _i3.TVSeriesDetailModel {}

class _FakeResponse extends _i1.Fake implements _i4.Response {}

class _FakeStreamedResponse extends _i1.Fake implements _i5.StreamedResponse {}

/// A class which mocks [TVSeriesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVSeriesRepository extends _i1.Mock implements _i6.TVSeriesRepository {
  MockTVSeriesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>> getNowPlayingTVSeries() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTVSeries, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>.value(
              _FakeEither<_i8.Failure, List<_i9.TVSeries>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>> getPopularTVSeries() =>
      (super.noSuchMethod(Invocation.method(#getPopularTVSeries, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>.value(
              _FakeEither<_i8.Failure, List<_i9.TVSeries>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>> getTopRatedTVSeries() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTVSeries, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>.value(
              _FakeEither<_i8.Failure, List<_i9.TVSeries>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, _i10.TVSeriesDetail>> getTVSeriesDetail(
      int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVSeriesDetail, [id]),
          returnValue: Future<_i2.Either<_i8.Failure, _i10.TVSeriesDetail>>.value(
              _FakeEither<_i8.Failure, _i10.TVSeriesDetail>())) as _i7
          .Future<_i2.Either<_i8.Failure, _i10.TVSeriesDetail>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>> getTVSeriesRecommendations(
      int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVSeriesRecommendations, [id]),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>.value(
              _FakeEither<_i8.Failure, List<_i9.TVSeries>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>> searchTVSeries(
      String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTVSeries, [query]),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>.value(
              _FakeEither<_i8.Failure, List<_i9.TVSeries>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, String>> saveWatchlist(
      _i10.TVSeriesDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [movie]),
          returnValue: Future<_i2.Either<_i8.Failure, String>>.value(
              _FakeEither<_i8.Failure, String>()))
      as _i7.Future<_i2.Either<_i8.Failure, String>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, String>> removeWatchlist(
      _i10.TVSeriesDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<_i2.Either<_i8.Failure, String>>.value(
              _FakeEither<_i8.Failure, String>()))
      as _i7.Future<_i2.Either<_i8.Failure, String>>);
  @override
  _i7.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>> getWatchlistTVSeries() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTVSeries, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>.value(
              _FakeEither<_i8.Failure, List<_i9.TVSeries>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.TVSeries>>>);
}

/// A class which mocks [TVSeriesRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVSeriesRemoteDataSource extends _i1.Mock
    implements _i11.TVSeriesRemoteDataSource {
  MockTVSeriesRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i12.TVSeriesModel>> getNowPlayingTVSeries() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTVSeries, []),
          returnValue:
          Future<List<_i12.TVSeriesModel>>.value(<_i12.TVSeriesModel>[]))
      as _i7.Future<List<_i12.TVSeriesModel>>);
  @override
  _i7.Future<List<_i12.TVSeriesModel>> getPopularTVSeries() => (super.noSuchMethod(
      Invocation.method(#getPopularTVSeries, []),
      returnValue: Future<List<_i12.TVSeriesModel>>.value(<_i12.TVSeriesModel>[]))
  as _i7.Future<List<_i12.TVSeriesModel>>);
  @override
  _i7.Future<List<_i12.TVSeriesModel>> getTopRatedTVSeries() => (super.noSuchMethod(
      Invocation.method(#getTopRatedTVSeries, []),
      returnValue: Future<List<_i12.TVSeriesModel>>.value(<_i12.TVSeriesModel>[]))
  as _i7.Future<List<_i12.TVSeriesModel>>);
  @override
  _i7.Future<_i3.TVSeriesDetailModel> getTVSeriesDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVSeriesDetail, [id]),
          returnValue: Future<_i3.TVSeriesDetailModel>.value(
              _FakeTVSeriesDetailResponse()))
      as _i7.Future<_i3.TVSeriesDetailModel>);
  @override
  _i7.Future<List<_i12.TVSeriesModel>> getTVSeriesRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVSeriesRecommendations, [id]),
          returnValue:
          Future<List<_i12.TVSeriesModel>>.value(<_i12.TVSeriesModel>[]))
      as _i7.Future<List<_i12.TVSeriesModel>>);
  @override
  _i7.Future<List<_i12.TVSeriesModel>> searchTVSeries(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTVSeries, [query]),
          returnValue:
          Future<List<_i12.TVSeriesModel>>.value(<_i12.TVSeriesModel>[]))
      as _i7.Future<List<_i12.TVSeriesModel>>);
}

/// A class which mocks [TVSeriesLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTVSeriesLocalDataSource extends _i1.Mock
    implements _i13.TVSeriesLocalDataSource {
  MockTVSeriesLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String> insertWatchlist(_i14.TVSeriesTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<String> removeWatchlist(_i14.TVSeriesTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i14.TVSeriesTable?> getTVSeriesById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVSeriesById, [id]),
          returnValue: Future<_i14.TVSeriesTable?>.value())
      as _i7.Future<_i14.TVSeriesTable?>);
  @override
  _i7.Future<List<_i14.TVSeriesTable>> getWatchlistTVSeries() => (super.noSuchMethod(
      Invocation.method(#getWatchlistTVSeries, []),
      returnValue: Future<List<_i14.TVSeriesTable>>.value(<_i14.TVSeriesTable>[]))
  as _i7.Future<List<_i14.TVSeriesTable>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i15.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i16.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
          returnValue: Future<_i16.Database?>.value())
      as _i7.Future<_i16.Database?>);
  @override
  _i7.Future<int> insertWatchlistTVSeries(_i14.TVSeriesTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> removeWatchlistTVSeries(_i14.TVSeriesTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<Map<String, dynamic>?> getTVSeriesById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTVSeriesById, [id]),
          returnValue: Future<Map<String, dynamic>?>.value())
      as _i7.Future<Map<String, dynamic>?>);
  @override
  _i7.Future<List<Map<String, dynamic>>> getWatchlistTVSeries() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTVSeries, []),
          returnValue: Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[]))
      as _i7.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i17.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
          returnValue: Future<_i4.Response>.value(_FakeResponse()))
      as _i7.Future<_i4.Response>);
  @override
  _i7.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
          returnValue: Future<_i4.Response>.value(_FakeResponse()))
      as _i7.Future<_i4.Response>);
  @override
  _i7.Future<_i4.Response> post(Uri? url,
      {Map<String, String>? headers,
        Object? body,
        _i18.Encoding? encoding}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [url],
              {#headers: headers, #body: body, #encoding: encoding}),
          returnValue: Future<_i4.Response>.value(_FakeResponse()))
      as _i7.Future<_i4.Response>);
  @override
  _i7.Future<_i4.Response> put(Uri? url,
      {Map<String, String>? headers,
        Object? body,
        _i18.Encoding? encoding}) =>
      (super.noSuchMethod(
          Invocation.method(#put, [url],
              {#headers: headers, #body: body, #encoding: encoding}),
          returnValue: Future<_i4.Response>.value(_FakeResponse()))
      as _i7.Future<_i4.Response>);
  @override
  _i7.Future<_i4.Response> patch(Uri? url,
      {Map<String, String>? headers,
        Object? body,
        _i18.Encoding? encoding}) =>
      (super.noSuchMethod(
          Invocation.method(#patch, [url],
              {#headers: headers, #body: body, #encoding: encoding}),
          returnValue: Future<_i4.Response>.value(_FakeResponse()))
      as _i7.Future<_i4.Response>);
  @override
  _i7.Future<_i4.Response> delete(Uri? url,
      {Map<String, String>? headers,
        Object? body,
        _i18.Encoding? encoding}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url],
              {#headers: headers, #body: body, #encoding: encoding}),
          returnValue: Future<_i4.Response>.value(_FakeResponse()))
      as _i7.Future<_i4.Response>);
  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i19.Uint8List> readBytes(Uri? url,
      {Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#readBytes, [url], {#headers: headers}),
          returnValue: Future<_i19.Uint8List>.value(_i19.Uint8List(0)))
      as _i7.Future<_i19.Uint8List>);
  @override
  _i7.Future<_i5.StreamedResponse> send(_i20.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
          returnValue:
          Future<_i5.StreamedResponse>.value(_FakeStreamedResponse()))
      as _i7.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
